#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar  1 23:55:04 2018

@author: fiction
p61


Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are 
all figurate (polygonal) numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	     P4,n=n^2 	  	1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, 
has three interesting properties.

    1,The set is cyclic, in that the last two digits of each number is the 
    first two digits of the next number (including the last number with the first).
    2,Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), 
    and pentagonal (P5,44=2882), is represented by a different number in the set.
    3,This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for 
which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, 
and octagonal, is represented by a different number in the set.

"""

tri=[]
squ=[]
pen=[]
hexa=[]
hep=[]
ocu=[]
alldic={}
for n in range(10,10000):
    tr = int(n*(n+1)/2)
    sq = n**2
    pe = int(n*(3*n-1)/2)
    hexag = n*(2*n-1)
    hepta = int(n*(5*n-3)/2)
    oc = n*(3*n-2)
    if len(str(tr))==4:
        tri.append(tr)
        alldic.setdefault(tr,[]).append('tri')
    if len(str(sq))==4:
        squ.append(sq)
        alldic.setdefault(sq,[]).append('squ')
    if len(str(pe))==4:
        pen.append(pe)
        alldic.setdefault(pe,[]).append('pen')
    if len(str(hexag))==4:
        hexa.append(hexag)
        alldic.setdefault(hexag,[]).append('hexa')
    if len(str(hepta))==4:
        hep.append(hepta)
        alldic.setdefault(hepta,[]).append('hep')
    if len(str(oc))==4:
        ocu.append(oc)
        alldic.setdefault(oc,[]).append("ocu")
        
"""総当りは時間かかりずぎ
#def cyclecheck(num):
#    st = str(num)
#    int4 = int(st[2:6])
#    int5 = int(st[4:8]) 
#    int6 = int(st[6:10])
#    int7 = int(st[8:12])
#    int8 = int(st[10:14])
#    if int4 not in squ:return False
#    if int5 not in pen:return False
#    if int6 not in hexa:return False
#    if int7 not in hep:return False
#    if int8 not in ocu:return False
#    return True
#
#ans = 0
#for oc in ocu:
#    for i in range(1000000000,10000000000):
#        num = int(str(i)+str(oc))
#        if cyclecheck(num):
#            ans = num
"""
"""#この問題では順序は3-8でなくてよいのでこれも間違い
#for tr in tri:
#    now = str(tr)[-2:]
#    for sq in squ:
#        sqpos=[]
#        if str(sq)[:2]==now:
#            for pe in pen:
#                if str(pe)[:2]==str(sq)[-2:]:
#                    for hexag in hexa:
#                        if str(hexag)[:2]==str(pe)[-2:]:
#                            for hepta in hep:
#                                if str(hepta)[:2]==str(hexag)[-2:]:
#                                    for oc in ocu:
#                                        if str(oc)[:2]==str(hepta)[-2:] and str(oc)[-2:]==str(tr)[:2]:
#                                            if len({tr,sq,pe,hexag,hepta,oc})==6:
#                                                print(tr+sq+pe+hexag+hepta+oc)
#                                            
        
"""

alls=alldic.keys()
for tr in alls:
    now = str(tr)[-2:]
    for sq in alls:
        if len(set(alldic[tr]+alldic[sq]))<2:continue
        if str(sq)[:2]==now:
            for pe in alls:
                if len(set(alldic[tr]+alldic[sq]+alldic[pe]))<3:continue
                if str(pe)[:2]==str(sq)[-2:]:
                    for hexag in alls: 
                        if len(set(alldic[tr]+alldic[sq]+alldic[pe]+alldic[hexag]))<4:continue
                        if str(hexag)[:2]==str(pe)[-2:]:
                            for hepta in alls:
                                if len(set(alldic[tr]+alldic[sq]+alldic[pe]+alldic[hexag]+alldic[hepta]))<5:continue
                                if str(hepta)[:2]==str(hexag)[-2:]:
                                    for oc in alls:
                                        if len(set(alldic[tr]+alldic[sq]+alldic[pe]+alldic[hexag]+alldic[hepta]+alldic[oc]))<6:continue
                                        if str(oc)[:2]==str(hepta)[-2:] and str(oc)[-2:]==str(tr)[:2]:
                                            if len({tuple(alldic[tr]),tuple(alldic[sq]),tuple(alldic[pe]),tuple(alldic[hexag]),tuple(alldic[hepta]),tuple(alldic[oc])})<6:continue
                                            if len({tr,sq,pe,hexag,hepta,oc})==6:
                                                print(tr+sq+pe+hexag+hepta+oc)
                                                print([tr,sq,pe,hexag,hepta,oc])
                                                print(alldic[tr]+alldic[sq]+alldic[pe]+alldic[hexag]+alldic[hepta])
                                                
                                            
"""
    
 28684
[8256, 5625, 2512, 1281, 8128, 2882]
['tri', 'squ', 'hep', 'ocu', 'hexa', 'tri']  
のように解が得られるが、、、
  if len({tuple(alldic[tr]),tuple(alldic[sq]),tuple(alldic[pe])
          ,tuple(alldic[hexag]),tuple(alldic[hepta]),tuple(alldic[oc])})<6:continue  
      この方法では下記のような場合にも条件不一致とみなしてしまう
['hexa', 'tri']
['pen']
['hexa', 'tri']
['squ']
['hep']
['ocu'] 
解は見つかったが改善の余地あり
['hexa', 'tri', 'ocu']
など三種類のものも考慮して考えなければならない
"""